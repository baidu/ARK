#log.conf
#   以下是日志配置的最佳实践，其中涉及的配置项在下文中均有详细说明
#   
# *最佳实践* : 
#   logger的qualname直接使用类名。
#   因为本框架默认为每个类都初始化了logger，而类名也以 . 分隔，
#   因此只需要定义最上层的logger，则子类都会继承其配置。
#   如果不希望继承祖先logger配置，则可以设置logger的配置项 *propagate=0*。
#
# *示例* : 
#   以下在默认配置的基础上增加了key为client，qualname为are.client的logger，
#   并且选择继承祖先logger配置 *propagate=1*。
#   达到的效果为：
#       are.client类及其子类除了按照are的handler输出日志外，还另外单独使用了cldebug
#       handler，这个handler会把are.client的日志输出到单独的日志client.debug.log中。
#
#   [loggers]
#   keys=root,are,framework,opal,messagebus,main,client
#   
#   [logger_client]
#   level=DEBUG
#   handlers=cldebug
#   qualname=are.client
#   propagate=1
#
#   [handlers]
#   keys=gdall,gdinfo,gddebug,fwinfo,fwdebug,cldebug
#
#   [handler_cldebug]
#   class=handlers.LimitTimedRotatingFileHandler
#   level=DEBUG
#   formatter=fdefault
#   args=('../log/client.debug.log', 'm', 5, 10*1024*1024, 24*7, 'UTF-8')
#

###############################################

# 定义logger模块，root默认存在，其它的需要自定义。
# keys: 日志名列表，多个日志名以 , 号分隔，每个key中用 . 表示logger的继承关系
#
# 框架除root外预先定义了5个logger(are, framework, opal, messagebus,main)，
# 默认会输出5个日志：
#  *guardian-all.log* 	 ：完整日志
#  *guardian.info.log* 	 ：用户自行打印的 ``INFO`` 级别日志
#  *guardian.debug.log*  ：用户自行打印的 ``DEBUG`` 级别日志
#  *framework.info.log*  ：框架打印的 ``INFO`` 级别日志
#  *framework.debug.log* ：框架打印的 ``DEBUG`` 级别日志
# 除非完全了解框架，请勿删改，用户有需求可以添加自己的logger。
#
[loggers]
keys=root,ark,guardian

# 单个logger配置，需在[loggers]的"keys"项已经定义过，命名方式为"logger_ + key"
# root logger 必须包含两个配置:
# level: 日志级别，支持DEBUG, INFO, WARNING, ERROR, CRITICAL和NOTEST（打印全部日志），低于此level的日志不会输出到任何handler中
# handler: logger对应的handler列表，同样以 , 号分隔，必须在[handlers]中显示定义
# 非root logger需要额外增加两个配置:
# propagate: 是否继承更高级别logger的配置，0：否 1：是
# qualname: logger名称，用于logging.getLogger(NAME)中的NAME字段
#           *注意*: 程序中实际使用的是此值而不是logger的key名
#

[logger_root]
level=INFO
handlers=gdall

[logger_ark]
level=DEBUG
handlers=gdall,fwinfo,fwdebug
qualname=ARK
propagate=0

[logger_guardian]
level=DEBUG
handlers=gdall,gdinfo,gddebug
qualname=GUARDIAN
propagate=0

###############################################

# handler列表，多个取值以 , 号分隔
# 下面预定义了5个handler(gdall,gdinfo,gddebug,fwinfo,fwdebug)
# 用于框架输出，除非完全了解框架，请匆删改，用户有需求可以添加新的handler配置
#
[handlers]
keys=gdall,gdinfo,gddebug,fwinfo,fwdebug

# 单个handler配置，命名方式为"handler_ + key"，需要包含以下配置：
# class: handler类名，需要在logging package中已经定义过，也支持使用点分隔的class
# level: 日志级别，支持DEBUG, INFO, WARNING, ERROR, CRITICAL和NOTEST(打印全部日志)，高于此level的，此handler才会接收
# formatter: 需要在[formatters]中明确定义，如果取值为空则默认使用logging._defaultFormatter
# args: 对应handler类的初始化函数参数，这里提供了自定义的LimitTimedRotatingFileHandler类，
# 其支持按日志滚动的基础上同时提供大小限制，保证单个日志文件大小不会超限
# 参数依次为：文件名、滚动时间单位、滚动时间间隔、文件大小字节上限、日志保存数量、编码，
# 其中:
# 1. 滚动时间单位支持：s（秒）、m（分钟）、h（小时）、d（天），大小写不敏感
# 2. 滚动时间间隔与滚动时间单位的乘积决定了最终的切分间隔，如('h', 2)表示2小时切分一次
# 3. 大小上限设置成0表示不限制大小
# 4. 日志保存数量设置成0表示不清理日志，该值不能超过9999999
# 关于该handelr的实现详见代码文档
#
[handler_gdall]
class=handlers.LimitTimedRotatingFileHandler
level=DEBUG
formatter=fdefault
args=('../log/guardian-all.log', 'h', 1, 0, 24*7, 'UTF-8')

[handler_gdinfo]
class=handlers.LimitTimedRotatingFileHandler
level=INFO
formatter=fdefault
args=('../log/guardian.info.log', 'h', 1, 0, 24*7, 'UTF-8')

[handler_gddebug]
class=handlers.LimitTimedRotatingFileHandler
level=DEBUG
formatter=fdefault
args=('../log/guardian.debug.log', 'h', 1, 0, 24*7, 'UTF-8')

[handler_fwinfo]
class=handlers.LimitTimedRotatingFileHandler
level=INFO
formatter=fdefault
args=('../log/framework.info.log', 'h', 1, 0, 24*7, 'UTF-8')

[handler_fwdebug]
class=handlers.LimitTimedRotatingFileHandler
level=DEBUG
formatter=fdefault
args=('../log/framework.debug.log', 'h', 1, 0, 24*7, 'UTF-8')

###############################################

# formatter列表，多个取值以 , 号分隔
# 这里预定义了fdefault用于框架输出，除非完全了解框架，请匆删改，用户有需求可以添加新的formatter配置
#
[formatters]
keys=fdefault,fexample

# 单个formatter配置，命名方式为"formatter_+ key"，需要包含以下配置：
# format: 日志格式，由于进行了封装，只支持标准库如下参数
#       --------------------------------------------------
#        %(asctime)s       年-月-日 时-分-秒,毫秒 2013-04-26 20:10:43,745
#        %(levelname)s     日志级别名
#        %(message)s       消息体
#        %(name)s          日志模块名
#        %(process)d       进程id
#        %(processName)s   进程名
#        %(thread)d        线程id
#        %(threadName)s    线程名
#       --------------------------------------------------
#        另外会默认输出以下信息，不需要配置，也 *不支持* 去除
#         	文件名
#         	行号
#         	函数名
#         	函数形参和实参（仅当输出日志级别为DEBUG时）
#         	Guardian ID，异常为Wrong，默认为UNKNOWN
#         	Operation ID，默认为UNKNOWN
# datefmt: 时间格式，如果无值则使用asctime默认格式，参数支持同time.strftime
# 详见https://docs.python.org/2.7/library/time.html#time.strftime
# class: 可选参数，默认使用logging.Formatter，支持自定义
# 
[formatter_fdefault]
format=%(levelname)s.%(name)s %(asctime)s %(processName)s.%(threadName)s%(message)s
datefmt=

[formatter_fexample]
format=%(name)-12s: %(levelname)-8s %(message)s
datefmt=%a, %d %b %Y %H:%M:%S

